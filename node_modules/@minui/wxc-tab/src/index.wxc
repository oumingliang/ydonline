<template>
  <view class="tab {{fullScreen? 'tab__full' : ''}}">

    <!-- defalut tab-label -->
    <block wx:if="{{type === 'simple'}}">
      <scroll-view
        scroll-x="{{true}}"
        class="tab__navbar"
        scroll-left="{{(move-width*2.1) / 2}}"
        scroll-with-animation="{{animate}}"
      >
        <view class="tab__navbar-wrap">
          <view
            class="tab__navbar-item tab__navbar-item--default"
            wx:for="{{tabs}}"
            wx:for-item="tab"
            wx:key="index"
            data-key="{{tab.key}}"
            data-idx="{{index}}"
            bindtap="onSwitch"
            style="width: {{width}}rpx; color:{{index === activeKey ? activeTextColor : textColor}}"
          >
            <label class="tab__navbar-title">{{tab.label}}</label>
          </view>

          <view class="tab__line {{!animate ? '' : 'tab__line--animate'}}"
            style="left:{{move}}rpx; width: {{width}}rpx; background-color: {{activeLineColor}};">
          </view>

        </view>
      </scroll-view>
    </block>

    <!-- config tab-label -->
    <block>
      <scroll-view
        scroll-x="{{true}}"
        class="tab__navbar"
        scroll-left="{{(move-width*2.1) / 2}}"
        scroll-with-animation="{{animate}}"
      >
        <view class="tab__navbar-wrap">
          <slot name="tablabel"></slot>
          <view class="tab__line {{!animate ? '' : 'tab__line--animate'}}"
            style="left:{{move}}rpx; width: {{width}}rpx; background-color: {{activeLineColor}};">
          </view>
        </view>
      </scroll-view>
    </block>

    <!-- tab-panel -->
    <view class="tab__content-wrap" style="border-top: 2rpx solid {{lineColor}}; {{fullScreen? 'height: 100%;': ''}}">
      <view class="tab__content" style="{{fullScreen? 'height: 100%;': ''}}">
        <slot></slot>
      </view>
    </view>

  </view>
</template>

<script>
import Event from './Event';
export default {
  config: {
    usingComponents: {}
  },
  options: {
    multipleSlots: true // support multi slot
  },
  behaviors: [],
  properties: {
    fullScreen: {
      type: Boolean,
      value: false
    },
    defaultIndex: {
      type: Number,
      value: 0
    },
    componentId: {
      type: String,
      value: ''
    },
    animate: {
      type: Boolean,
      value: false
    },
    textColor: {
      type: String,
      value: '#000',
    },
    activeTextColor: {
      type: String,
      value: '#ff5777',
    },
    lineColor: {
      type: String,
      value: '#ddd',
    },
    activeLineColor: {
      type: String,
      value: '#ff5777',
    }
  },
  data: {
    tabs: [],
    width: 0,
    activeKey: 0,
    move: 0
  },
  attached() {
    this.componentId = this.data.componentId;
    this.tabs = [];
    Event.on(`tab-create-${this.componentId}`, tab => {
      this.type = !tab.label ? 'complex' : 'simple';
      this.tabs.push(tab);
    });
  },
  ready() {
    let activeKey = this.minAndMax(this.data.defaultIndex);
    this.onSwitch(activeKey, 'all');
    this.listenSwitch();
    // const width = this.tabs.length < 5 ? (100 / this.tabs.length) : 25;
    let len = this.tabs.length;
    const width = parseInt(750 / (len > 5? 5 : len))
    this.type === 'complex' && Event.emit(`label-width-${this.componentId}`, width);
    this.setData({
      tabs: this.tabs,
      width,
      type: this.type,
      move: width * activeKey
    });
  },
  detached() {
    Event.removeListener();
  },
  methods: {

    // limit input range
    minAndMax(activeKey) {
      const max = this.tabs.length - 1;
      const min = 0;
      if ( activeKey > max ) {
        return max;
      } else if (activeKey < min){
        return 0;
      } else {
        return activeKey;
      }
    },

    // lisen child component tab event
    listenSwitch() {
      Event.on(`from-label-switch-${this.componentId}`, key => {
        this.onSwitch(key, 'to-panel');
      });
      Event.on(`from-panel-switch-${this.componentId}`, key => {
        this.onSwitch(key, 'to-label');
      });
    },

    onSwitch(activeKey, toNotice) {
      if (!toNotice) {
        activeKey = activeKey.currentTarget.dataset.idx;
        toNotice = 'to-panel';
      }
      const move = activeKey * this.data.width;
      this.setData({
        activeKey,
        move
      });

      // to notice panel and label tab has switched
      if (toNotice === 'all') {
        Event.emit(`to-label-switch-${this.componentId}`, activeKey);
        Event.emit(`to-panel-switch-${this.componentId}`, activeKey);
      } else {
        Event.emit(`${toNotice}-switch-${this.componentId}`, activeKey);
      }

      this.afterSwitch(activeKey);
    },

    afterSwitch(activeKey) {
      this.triggerEvent('tabchange', {
        key: activeKey,
        componentId: this.componentId
      });
    }

  }
}
</script>

<style lang="pcss">
@b tab {
  @e full {
    position: fixed;
    width: 100%;
    height: 100%;
  }

  @e navbar-wrap {
    position: relative;
  }
  @e navbar {
    white-space: nowrap;
    width: 100%;
  }
  @e navbar-item {
    text-align: center;
    display: inline-block;
    overflow: hidden;
    white-space: nowrap;
  }
  @e navbar-item {
    @m default {
      padding: 13rpx 0;
    }
  }
  @e line {
    position: absolute;
    left: 0;
    bottom: 0;
    height: 4rpx;
  }
  @e line {
    @m animate {
      transition: left .3s cubic-bezier(.645, .045, .355, 1);
    }
  }
  @e content-wrap {
    width: 100%;
    overflow: hidden;
  }
  @e content {
    width: 100%;
  }
}
</style>
